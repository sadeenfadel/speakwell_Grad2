<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" />
  <link rel="stylesheet" href="/css/g.css">
  <title>DRAG AND DROP GAME</title>
 
  
</head>
<body>
  <section class="draggable-elements">
    <i class="fas fa-cat draggable" draggable="true" style="color: #ff6384;" id="cat"></i>
    <i class="fas fa-dog draggable" draggable="true" style="color: #36a2eb;" id="dog"></i>
    <i class="fas fa-dove draggable" draggable="true" style="color: #ffce56;" id="dove"></i>
    <i class="fas fa-fish draggable" draggable="true" style="color: #9966ff;" id="fish"></i>
    <i class="fas fa-frog draggable" draggable="true" style="color: #4bc0c0;" id="frog"></i>
  </section>
  <section class="droppable-elements">
    <div class="droppable" data-draggable-id="frog"><span>Frog</span></div>
    <div class="droppable" data-draggable-id="dove"><span>Bird</span></div>
    <div class="droppable" data-draggable-id="cat"><span>Cat</span></div>
    <div class="droppable" data-draggable-id="fish"><span>Fish</span></div>
    <div class="droppable" data-draggable-id="dog"><span>Dog</span></div>
  </section>
  <button class="finish-button" id="finishButton">Finish</button>
  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      const draggables = document.querySelectorAll('.draggable');
      const droppables = document.querySelectorAll('.droppable');
      const finishButton = document.getElementById('finishButton');

      draggables.forEach(draggable => {
        draggable.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', draggable.id);
        });
      });

      droppables.forEach(droppable => {
        droppable.addEventListener('dragover', (e) => {
          e.preventDefault();
        });

        droppable.addEventListener('drop', (e) => {
          e.preventDefault();
          const draggableId = e.dataTransfer.getData('text');
          const draggableElement = document.getElementById(draggableId);
          const correctId = droppable.getAttribute('data-draggable-id');

          if (draggableId === correctId) {
            droppable.appendChild(draggableElement);
            speakAnimal(draggableId);
          }
        });
      });

      finishButton.addEventListener('click', () => {
        let allCorrect = true;

        droppables.forEach(droppable => {
          const expectedId = droppable.getAttribute('data-draggable-id');
          const child = droppable.querySelector('.draggable');

          if (!child || child.id !== expectedId) {
            allCorrect = false;
          }
        });

        if (allCorrect) {
          speakMessage('Congratulations! All animals are correctly placed.');
          setTimeout(() => {
            window.location.href = '/celebrate';
          }, 2000);
        } else {
          speakMessage('Some animals are not correctly placed. Please try again.');
        }
      });

      function speakAnimal(animal) {
        const synth = window.speechSynthesis;
        let utterThis;
        switch (animal) {
          case 'cat':
            utterThis = new SpeechSynthesisUtterance('Cat');
            break;
          case 'dog':
            utterThis = new SpeechSynthesisUtterance('Dog');
            break;
          case 'dove':
            utterThis = new SpeechSynthesisUtterance('Bird');
            break;
          case 'fish':
            utterThis = new SpeechSynthesisUtterance('Fish');
            break;
          case 'frog':
            utterThis = new SpeechSynthesisUtterance('Frog');
            break;
          default:
            return;
        }
        synth.speak(utterThis);
      }

      function speakMessage(message) {
        const synth = window.speechSynthesis;
        const utterThis = new SpeechSynthesisUtterance(message);
        synth.speak(utterThis);
      }
    });
  </script>
</body>
</html>
<script>
      function speakAnimal(animal) {
        const synth = window.speechSynthesis;
        let utterThis;
        switch (animal) {
          case 'cat':
            utterThis = new SpeechSynthesisUtterance('Cat');
            break;
          case 'dog':
            utterThis = new SpeechSynthesisUtterance('Dog');
            break;
          case 'dove':
            utterThis = new SpeechSynthesisUtterance('Bird');
            break;
          case 'fish':
            utterThis = new SpeechSynthesisUtterance('Fish');
            break;
          case 'frog':
            utterThis = new SpeechSynthesisUtterance('Frog');
            break;
          default:
            return;
        }
        synth.speak(utterThis);
      }

      function speakMessage(message) {
        const synth = window.speechSynthesis;
        const utterThis = new SpeechSynthesisUtterance(message);
        synth.speak(utterThis);
      }
   
  </script>
  </script>
</body>
</html>
